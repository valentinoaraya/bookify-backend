import cron from "node-cron"
import AppointmentModel from "../models/Appointment"
import CompanyModel from "../models/Company"
import moment from "moment-timezone"
import { sendEmail } from "../services/emailService"
import { formatDate } from "./formatDate"

const sendAppointmentReminders = async () => {
    try {
        console.log("üîç Buscando turnos para enviar recordatorios...")
        
        // Obtener todas las empresas con sus configuraciones de recordatorios
        const companies = await CompanyModel.find({ reminders: { $exists: true, $ne: [] } })
            .populate('reminders.services', 'title')

        if (companies.length === 0) {
            console.log("‚ÑπÔ∏è No hay empresas con recordatorios configurados")
            return
        }

        let totalRemindersSent = 0

        for (const company of companies) {
            console.log(`üè¢ Procesando empresa: ${company.name}`)
            
            for (const reminderConfig of company.reminders) {
                const hoursBefore = reminderConfig.hoursBefore
                const targetServices = reminderConfig.services.map(service => service._id)
                
                // Calcular el rango de tiempo para este recordatorio
                const reminderTimeStart = moment().tz('America/Argentina/Buenos_Aires')
                    .add(hoursBefore, 'hours')
                    .startOf('hour')
                    .toDate()
                
                const reminderTimeEnd = moment().tz('America/Argentina/Buenos_Aires')
                    .add(hoursBefore, 'hours')
                    .endOf('hour')
                    .toDate()

                console.log(`‚è∞ Buscando turnos ${hoursBefore}h antes (${moment(reminderTimeStart).format('YYYY-MM-DD HH:mm')})`)

                // Buscar turnos que coincidan con el tiempo y servicios del recordatorio
                const appointments = await AppointmentModel.find({
                    companyId: company._id,
                    serviceId: { $in: targetServices },
                    date: { $gte: reminderTimeStart, $lte: reminderTimeEnd }
                })
                .populate<{ serviceId: { title: string } }>("serviceId", "title")
                .populate<{ companyId: { name: string } }>("companyId", "name")

                console.log(`üìÖ Encontrados ${appointments.length} turnos para recordar`)

                // Enviar recordatorios para estos turnos
                for (const appointment of appointments) {
                    const appointmentDate = moment(appointment.date).tz('America/Argentina/Buenos_Aires')
                    const dateInString = appointmentDate.format('YYYY-MM-DD HH:mm')
                    
                    // Determinar el mensaje seg√∫n las horas antes
                    let timeMessage = ""
                    if (hoursBefore === 24) {
                        timeMessage = "ma√±ana"
                    } else if (hoursBefore === 2) {
                        timeMessage = "en 2 horas"
                    } else if (hoursBefore === 1) {
                        timeMessage = "en 1 hora"
                    } else {
                        timeMessage = `en ${hoursBefore} horas`
                    }

                    const subject = hoursBefore === 24 
                        ? "üîî Recordatorio de tu turno" 
                        : `‚è∞ Tu turno es ${timeMessage}`

                    const textMessage = `Hola ${appointment.name},\n
                    \nTe recordamos que tienes un turno ${timeMessage} en ${appointment.companyId.name} para ${appointment.serviceId.title}.\n
                    \nFecha: ${formatDate(dateInString.split(' ')[0])} 
                    \nHora: ${dateInString.split(' ')[1]}\n
                    \n¬°No olvides asistir!`

                    const htmlMessage = `<p>Hola ${appointment.name},</p>
                    <p>Te recordamos que tienes un turno ${timeMessage} en <strong>${appointment.companyId.name}</strong> para <strong>${appointment.serviceId.title}</strong>.</p>
                    <p>Fecha: ${formatDate(dateInString.split(' ')[0])}</p>
                    <p>Hora: ${dateInString.split(' ')[1]}</p>
                    <p>¬°No olvides asistir!</p>`

                    try {
                        await sendEmail(
                            appointment.email,
                            subject,
                            textMessage,
                            htmlMessage
                        )
                        
                        console.log(`‚úÖ Recordatorio enviado a ${appointment.email} para turno ${timeMessage}`)
                        totalRemindersSent++
                    } catch (emailError) {
                        console.error(`‚ùå Error enviando email a ${appointment.email}:`, emailError)
                    }
                }
            }
        }

        console.log(`üìß Total de recordatorios enviados: ${totalRemindersSent}`)
    } catch (error: any) {
        console.error("‚ùå Error en sendAppointmentReminders:", error)
    }
}

export const startSendReminders = () => {
    // Ejecutar cada hora para cubrir todos los recordatorios posibles
    cron.schedule("0 * * * *", async () => {
        console.log("‚è≥ Ejecutando tarea de recordatorio de turnos...");
        await sendAppointmentReminders()
    })
}
